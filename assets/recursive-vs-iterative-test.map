{"version":3,"sources":["vendor/ember-cli/app-prefix.js","recursive-vs-iterative-test/app.js","recursive-vs-iterative-test/components/custom-color.js","recursive-vs-iterative-test/components/iterative-color.js","recursive-vs-iterative-test/components/recursive-color.js","recursive-vs-iterative-test/controllers/index.js","recursive-vs-iterative-test/initializers/app-version.js","recursive-vs-iterative-test/initializers/export-application-global.js","recursive-vs-iterative-test/router.js","recursive-vs-iterative-test/templates/application.js","recursive-vs-iterative-test/templates/components/iterative-color.js","recursive-vs-iterative-test/templates/components/recursive-color.js","recursive-vs-iterative-test/templates/index.js","recursive-vs-iterative-test/tests/app.jshint.js","recursive-vs-iterative-test/tests/components/custom-color.jshint.js","recursive-vs-iterative-test/tests/components/iterative-color.jshint.js","recursive-vs-iterative-test/tests/components/recursive-color.jshint.js","recursive-vs-iterative-test/tests/controllers/index.jshint.js","recursive-vs-iterative-test/tests/helpers/resolver.js","recursive-vs-iterative-test/tests/helpers/resolver.jshint.js","recursive-vs-iterative-test/tests/helpers/start-app.js","recursive-vs-iterative-test/tests/helpers/start-app.jshint.js","recursive-vs-iterative-test/tests/router.jshint.js","recursive-vs-iterative-test/tests/test-helper.js","recursive-vs-iterative-test/tests/test-helper.jshint.js","vendor/ember-cli/app-suffix.js","vendor/ember-cli/app-boot.js"],"sourcesContent":["/* jshint ignore:start */\n\n/* jshint ignore:end */\n","define('recursive-vs-iterative-test/app', ['exports', 'ember', 'ember/resolver', 'ember/load-initializers', 'recursive-vs-iterative-test/config/environment'], function (exports, Ember, Resolver, loadInitializers, config) {\n\n  'use strict';\n\n  Ember['default'].MODEL_FACTORY_INJECTIONS = true;\n\n  var App = Ember['default'].Application.extend({\n    modulePrefix: config['default'].modulePrefix,\n    podModulePrefix: config['default'].podModulePrefix,\n    Resolver: Resolver['default']\n  });\n\n  loadInitializers['default'](App, config['default'].modulePrefix);\n\n  exports['default'] = App;\n\n});","define('recursive-vs-iterative-test/components/custom-color', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    var CustomColorComponent = Ember['default'].Component.extend({\n        items: null,\n\n        renderObserver: (function () {\n            this.rerender();\n        }).observes(\"items.@each.color\"),\n\n        render: function render(buffer) {\n            var _this = this;\n\n            console.log(\"render\");\n            var items = this.get(\"items\");\n            if (items) {\n                items.forEach(function (item) {\n                    return buffer.push(_this.getMarkup(item));\n                });\n            }\n        },\n\n        getMarkup: function getMarkup(item) {\n            return \"\\n            <div class=\\\"color-component\\\" style=\\\"background-color: \" + item.get(\"color\") + \";\\\">\\n                    \" + item.get(\"id\") + \"\\n            </div>\\n        \";\n        }\n    });\n\n    exports['default'] = CustomColorComponent;\n\n});","define('recursive-vs-iterative-test/components/iterative-color', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    var IterativeColorComponent = Ember['default'].Component.extend({\n        classNames: [\"color-component\"],\n        attributeBindings: [\"style\"],\n        item: null,\n\n        style: (function () {\n            return \"background-color: \" + this.get(\"item.color\") + \";\";\n        }).property(\"item.color\")\n    });\n\n    exports['default'] = IterativeColorComponent;\n\n});","define('recursive-vs-iterative-test/components/recursive-color', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    var RecursiveColorComponent = Ember['default'].Component.extend({\n        item: null,\n\n        style: (function () {\n            return \"background-color: \" + this.get(\"item.color\") + \";\";\n        }).property(\"item.color\")\n    });\n\n    exports['default'] = RecursiveColorComponent;\n\n});","define('recursive-vs-iterative-test/controllers/index', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    var IndexController = Ember['default'].Controller.extend({\n        renderMethod: \"iterative\",\n        dataStructureSize: null,\n        iterativeDataStructure: null,\n        recursiveDataStructure: null,\n\n        itemCountBreakover: (function () {\n            var size = this.get(\"iterativeDataStructure.length\");\n            if (size <= 10) {\n                return \"small\";\n            } else if (size <= 100) {\n                return \"medium\";\n            } else {\n                return \"large\";\n            }\n        }).property(\"iterativeDataStructure.length\"),\n\n        recursiveRenderSelected: (function () {\n            return this.get(\"renderMethod\") === \"recursive\";\n        }).property(\"renderMethod\"),\n\n        iterativeRenderSelected: (function () {\n            return this.get(\"renderMethod\") === \"iterative\";\n        }).property(\"renderMethod\"),\n\n        customRenderSelected: (function () {\n            return this.get(\"renderMethod\") === \"custom\";\n        }).property(\"renderMethod\"),\n\n        actions: {\n            selectRender: function selectRender(type) {\n                this.set(\"renderMethod\", type);\n            },\n\n            clear: function clear() {\n                this.set(\"iterativeDataStructure\", null);\n                this.set(\"recursiveDataStructure\", null);\n                this.set(\"renderTime\", null);\n            },\n\n            run: function run() {\n                var _this = this;\n\n                var input = this.get(\"dataStructureSize\") || \"0\";\n                var size = parseInt(input, 10);\n                if (size === 0) {\n                    this.send(\"clear\");\n                } else {\n                    (function () {\n                        _this.set(\"renderTime\", null);\n                        var start = new Date().valueOf();\n\n                        _this.set(\"iterativeDataStructure\", _this.createIterativeData(size));\n                        _this.set(\"recursiveDataStructure\", _this.createRecursiveData(size));\n\n                        Ember['default'].run.scheduleOnce(\"afterRender\", null, function () {\n                            var end = new Date().valueOf();\n                            _this.set(\"renderTime\", end - start);\n                        });\n                    })();\n                }\n            }\n        },\n\n        createIterativeData: function createIterativeData(size) {\n            var arr = [];\n            for (var i = 0; i < size; i++) {\n                arr.push(Ember['default'].Object.create({\n                    id: i,\n                    color: this.randomColor()\n                }));\n            }\n            return arr;\n        },\n\n        createRecursiveData: function createRecursiveData(size) {\n            var _this = this;\n\n            var createObj = function (id) {\n                return Ember['default'].Object.create({\n                    id: id, color: _this.randomColor()\n                });\n            };\n\n            var first = createObj(0);\n            var current = first;\n            for (var i = 1; i < size; i++) {\n                current.next = createObj(i);\n                current = current.next;\n            }\n\n            return first;\n        },\n\n        randomColor: function randomColor() {\n            return \"#\" + Math.floor(Math.random() * 16777215).toString(16);\n        }\n    });\n\n    exports['default'] = IndexController;\n\n});","define('recursive-vs-iterative-test/initializers/app-version', ['exports', 'recursive-vs-iterative-test/config/environment', 'ember'], function (exports, config, Ember) {\n\n  'use strict';\n\n  var classify = Ember['default'].String.classify;\n\n  exports['default'] = {\n    name: \"App Version\",\n    initialize: function initialize(container, application) {\n      var appName = classify(application.toString());\n      Ember['default'].libraries.register(appName, config['default'].APP.version);\n    }\n  };\n\n});","define('recursive-vs-iterative-test/initializers/export-application-global', ['exports', 'ember', 'recursive-vs-iterative-test/config/environment'], function (exports, Ember, config) {\n\n  'use strict';\n\n  exports.initialize = initialize;\n\n  function initialize(container, application) {\n    var classifiedName = Ember['default'].String.classify(config['default'].modulePrefix);\n\n    if (config['default'].exportApplicationGlobal && !window[classifiedName]) {\n      window[classifiedName] = application;\n    }\n  }\n\n  ;\n\n  exports['default'] = {\n    name: \"export-application-global\",\n\n    initialize: initialize\n  };\n\n});","define('recursive-vs-iterative-test/router', ['exports', 'ember', 'recursive-vs-iterative-test/config/environment'], function (exports, Ember, config) {\n\n  'use strict';\n\n  var Router = Ember['default'].Router.extend({\n    location: config['default'].locationType\n  });\n\n  Router.map(function () {});\n\n  exports['default'] = Router;\n\n});","define('recursive-vs-iterative-test/templates/application', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"h2\");\n        dom.setAttribute(el1,\"id\",\"title\");\n        var el2 = dom.createTextNode(\"Recursive VS Iterative render test\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, content = hooks.content;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var morph0 = dom.createMorphAt(fragment,1,2,contextualElement);\n        content(env, morph0, context, \"outlet\");\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('recursive-vs-iterative-test/templates/components/iterative-color', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createTextNode(\"\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, content = hooks.content;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        if (this.cachedFragment) { dom.repairClonedNode(fragment,[0,1]); }\n        var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n        content(env, morph0, context, \"item.id\");\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('recursive-vs-iterative-test/templates/components/recursive-color', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"    \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, inline = hooks.inline;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n          inline(env, morph0, context, \"recursive-color\", [], {\"item\": get(env, context, \"item.next\")});\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"color-component\");\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, element = hooks.element, content = hooks.content, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        if (this.cachedFragment) { dom.repairClonedNode(fragment,[2]); }\n        var element0 = dom.childAt(fragment, [0]);\n        var morph0 = dom.createMorphAt(element0,0,1);\n        var morph1 = dom.createMorphAt(fragment,1,2,contextualElement);\n        element(env, element0, context, \"bind-attr\", [], {\"style\": get(env, context, \"style\")});\n        content(env, morph0, context, \"item.id\");\n        block(env, morph1, context, \"if\", [get(env, context, \"item.next\")], {}, child0, null);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('recursive-vs-iterative-test/templates/index', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"        Time to render: \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"ms\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, content = hooks.content;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n          content(env, morph0, context, \"renderTime\");\n          return fragment;\n        }\n      };\n    }());\n    var child1 = (function() {\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createTextNode(\"         \\n\");\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          return fragment;\n        }\n      };\n    }());\n    var child2 = (function() {\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"        \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, inline = hooks.inline;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n          inline(env, morph0, context, \"recursive-color\", [], {\"item\": get(env, context, \"recursiveDataStructure\")});\n          return fragment;\n        }\n      };\n    }());\n    var child3 = (function() {\n      var child0 = (function() {\n        return {\n          isHTMLBars: true,\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"            \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, get = hooks.get, inline = hooks.inline;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n            inline(env, morph0, context, \"iterative-color\", [], {\"item\": get(env, context, \"item\")});\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, block = hooks.block;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          if (this.cachedFragment) { dom.repairClonedNode(fragment,[0,1]); }\n          var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n          block(env, morph0, context, \"each\", [get(env, context, \"iterativeDataStructure\")], {\"keyword\": \"item\"}, child0, null);\n          return fragment;\n        }\n      };\n    }());\n    var child4 = (function() {\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"        \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, inline = hooks.inline;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n          inline(env, morph0, context, \"custom-color\", [], {\"items\": get(env, context, \"iterativeDataStructure\")});\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"elapsed\");\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"controls\");\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"div\");\n        var el3 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"button\");\n        var el3 = dom.createTextNode(\"Clear\");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"button\");\n        var el3 = dom.createTextNode(\"Run\");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"render-method\");\n        var el2 = dom.createTextNode(\"\\n    Rendering Method:\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"div\");\n        dom.setAttribute(el2,\"class\",\"recursive\");\n        var el3 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"label\");\n        var el4 = dom.createTextNode(\"Recursive\");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"div\");\n        dom.setAttribute(el2,\"class\",\"iterative\");\n        var el3 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"label\");\n        var el4 = dom.createTextNode(\"Iterative\");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"div\");\n        dom.setAttribute(el2,\"class\",\"custom\");\n        var el3 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"label\");\n        var el4 = dom.createTextNode(\"Custom\");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"div\");\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"div\");\n        dom.setAttribute(el2,\"class\",\"label\");\n        var el3 = dom.createTextNode(\"Render method: \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\\n\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, block = hooks.block, inline = hooks.inline, element = hooks.element, content = hooks.content;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var element0 = dom.childAt(fragment, [2]);\n        var element1 = dom.childAt(element0, [3]);\n        var element2 = dom.childAt(element0, [5]);\n        var element3 = dom.childAt(fragment, [4]);\n        var element4 = dom.childAt(element3, [1]);\n        var element5 = dom.childAt(element4, [2]);\n        var element6 = dom.childAt(element3, [3]);\n        var element7 = dom.childAt(element6, [2]);\n        var element8 = dom.childAt(element3, [5]);\n        var element9 = dom.childAt(element8, [2]);\n        var element10 = dom.childAt(fragment, [6]);\n        var morph0 = dom.createMorphAt(dom.childAt(fragment, [0]),0,-1);\n        var morph1 = dom.createMorphAt(dom.childAt(element0, [1]),0,1);\n        var morph2 = dom.createMorphAt(element4,0,1);\n        var morph3 = dom.createMorphAt(element6,0,1);\n        var morph4 = dom.createMorphAt(element8,0,1);\n        var morph5 = dom.createMorphAt(dom.childAt(element10, [1]),0,-1);\n        var morph6 = dom.createMorphAt(element10,2,3);\n        var morph7 = dom.createMorphAt(element10,3,4);\n        var morph8 = dom.createMorphAt(element10,4,-1);\n        block(env, morph0, context, \"if\", [get(env, context, \"renderTime\")], {}, child0, child1);\n        inline(env, morph1, context, \"input\", [], {\"value\": get(env, context, \"dataStructureSize\"), \"placeholder\": \"entity count\"});\n        element(env, element1, context, \"action\", [\"clear\"], {});\n        element(env, element2, context, \"action\", [\"run\"], {});\n        inline(env, morph2, context, \"input\", [], {\"type\": \"checkbox\", \"checked\": get(env, context, \"recursiveRenderSelected\"), \"disabled\": true});\n        element(env, element5, context, \"action\", [\"selectRender\", \"recursive\"], {});\n        inline(env, morph3, context, \"input\", [], {\"type\": \"checkbox\", \"checked\": get(env, context, \"iterativeRenderSelected\"), \"disabled\": true});\n        element(env, element7, context, \"action\", [\"selectRender\", \"iterative\"], {});\n        inline(env, morph4, context, \"input\", [], {\"type\": \"checkbox\", \"checked\": get(env, context, \"customRenderSelected\"), \"disabled\": true});\n        element(env, element9, context, \"action\", [\"selectRender\", \"custom\"], {});\n        element(env, element10, context, \"bind-attr\", [], {\"class\": \":render-pane itemCountBreakover\"});\n        content(env, morph5, context, \"renderMethod\");\n        block(env, morph6, context, \"if\", [get(env, context, \"recursiveRenderSelected\")], {}, child2, null);\n        block(env, morph7, context, \"if\", [get(env, context, \"iterativeRenderSelected\")], {}, child3, null);\n        block(env, morph8, context, \"if\", [get(env, context, \"customRenderSelected\")], {}, child4, null);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('recursive-vs-iterative-test/tests/app.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - .');\n  test('app.js should pass jshint', function() { \n    ok(true, 'app.js should pass jshint.'); \n  });\n\n});","define('recursive-vs-iterative-test/tests/components/custom-color.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - components');\n  test('components/custom-color.js should pass jshint', function() { \n    ok(true, 'components/custom-color.js should pass jshint.'); \n  });\n\n});","define('recursive-vs-iterative-test/tests/components/iterative-color.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - components');\n  test('components/iterative-color.js should pass jshint', function() { \n    ok(true, 'components/iterative-color.js should pass jshint.'); \n  });\n\n});","define('recursive-vs-iterative-test/tests/components/recursive-color.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - components');\n  test('components/recursive-color.js should pass jshint', function() { \n    ok(true, 'components/recursive-color.js should pass jshint.'); \n  });\n\n});","define('recursive-vs-iterative-test/tests/controllers/index.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - controllers');\n  test('controllers/index.js should pass jshint', function() { \n    ok(true, 'controllers/index.js should pass jshint.'); \n  });\n\n});","define('recursive-vs-iterative-test/tests/helpers/resolver', ['exports', 'ember/resolver', 'recursive-vs-iterative-test/config/environment'], function (exports, Resolver, config) {\n\n  'use strict';\n\n  var resolver = Resolver['default'].create();\n\n  resolver.namespace = {\n    modulePrefix: config['default'].modulePrefix,\n    podModulePrefix: config['default'].podModulePrefix\n  };\n\n  exports['default'] = resolver;\n\n});","define('recursive-vs-iterative-test/tests/helpers/resolver.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - helpers');\n  test('helpers/resolver.js should pass jshint', function() { \n    ok(true, 'helpers/resolver.js should pass jshint.'); \n  });\n\n});","define('recursive-vs-iterative-test/tests/helpers/start-app', ['exports', 'ember', 'recursive-vs-iterative-test/app', 'recursive-vs-iterative-test/router', 'recursive-vs-iterative-test/config/environment'], function (exports, Ember, Application, Router, config) {\n\n  'use strict';\n\n\n\n  exports['default'] = startApp;\n  function startApp(attrs) {\n    var application;\n\n    var attributes = Ember['default'].merge({}, config['default'].APP);\n    attributes = Ember['default'].merge(attributes, attrs); // use defaults, but you can override;\n\n    Ember['default'].run(function () {\n      application = Application['default'].create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n    });\n\n    return application;\n  }\n\n});","define('recursive-vs-iterative-test/tests/helpers/start-app.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - helpers');\n  test('helpers/start-app.js should pass jshint', function() { \n    ok(true, 'helpers/start-app.js should pass jshint.'); \n  });\n\n});","define('recursive-vs-iterative-test/tests/router.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - .');\n  test('router.js should pass jshint', function() { \n    ok(true, 'router.js should pass jshint.'); \n  });\n\n});","define('recursive-vs-iterative-test/tests/test-helper', ['recursive-vs-iterative-test/tests/helpers/resolver', 'ember-qunit'], function (resolver, ember_qunit) {\n\n\t'use strict';\n\n\tember_qunit.setResolver(resolver['default']);\n\n});","define('recursive-vs-iterative-test/tests/test-helper.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - .');\n  test('test-helper.js should pass jshint', function() { \n    ok(true, 'test-helper.js should pass jshint.'); \n  });\n\n});","/* jshint ignore:start */\n\n/* jshint ignore:end */\n","/* jshint ignore:start */\n\ndefine('recursive-vs-iterative-test/config/environment', ['ember'], function(Ember) {\n  var prefix = 'recursive-vs-iterative-test';\n/* jshint ignore:start */\n\ntry {\n  var metaName = prefix + '/config/environment';\n  var rawConfig = Ember['default'].$('meta[name=\"' + metaName + '\"]').attr('content');\n  var config = JSON.parse(unescape(rawConfig));\n\n  return { 'default': config };\n}\ncatch(err) {\n  throw new Error('Could not read config from meta tag with name \"' + metaName + '\".');\n}\n\n/* jshint ignore:end */\n\n});\n\nif (runningTests) {\n  require(\"recursive-vs-iterative-test/tests/test-helper\");\n} else {\n  require(\"recursive-vs-iterative-test/app\")[\"default\"].create({\"name\":\"recursive-vs-iterative-test\",\"version\":\"0.0.0.8383f0fc\"});\n}\n\n/* jshint ignore:end */\n"],"names":[],"mappings":"AAAA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbxGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjhrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;","file":"recursive-vs-iterative-test.js"}